// Copyright 2023 Vedran Vuk. All rights reserved.
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.

package boil

import "strings"

// Variable defines a known variable.
type Variable int

const (
	// VarWorkingDirectory is always available.
	VarWorkingDirectory Variable = iota
	// VarTemplatePath is exec command template-path.
	VarTemplatePath
	// VarOutputDirectory is exec command output-dir.
	VarOutputDirectory
)

// StdVariables is a slice of standard variables.
var StdVariables = []string{
	"WorkingDirectory",
	"TemplatePath",
	"OutputDirectory",
}

// Variables defines a map of variables keying variable names to their values.
//
// A variable is a value that is available to Template files on execution
// either as data for a Template file being executed with text/template or as
// values when expending placeholders in Template file names.
//
// Variables can be extracted from files, generated by an external
// command or defined by the user on Template execution via command line.
type Variables map[string]any

// ReplacePlaceholders replaces all known variable placeholders in input string
// with actual values and returns it.
//
// A placeholder is a case sensitive variable name prefixed with "$".
func (self Variables) ReplacePlaceholders(in string) (out string) {
	out = in
	for k, v := range self {
		out = strings.ReplaceAll(out, "$"+k, v.(string))
	}
	return out
}

// MaybeSetString sets the value of out to the value of the Variable under key
// if it exists in self and is of type string. Otherwise, out is unmodified.
func (self Variables) MaybeSetString(key Variable, out *string) {
	if key < 0 || int(key) >= len(StdVariables) {
		return
	}
	var val, exists = self[StdVariables[key]]
	if !exists {
		return
	}
	var str, ok = val.(string)
	if !ok {
		return
	}
	*out = str
}

// AddNew adds variables that do not exist in self to self and returns self.
func (self Variables) AddNew(variables Variables) Variables {
	for k, v := range variables {
		if _, exists := self[k]; exists {
			continue
		}
		self[k] = v
	}
	return self
}
